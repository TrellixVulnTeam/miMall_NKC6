{"remainingRequest":"/home/manhuax/xmh/2021/Vue全家桶高访小米商城/my code/MiMall-xmh/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/manhuax/xmh/2021/Vue全家桶高访小米商城/my code/MiMall-xmh/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/manhuax/xmh/2021/Vue全家桶高访小米商城/my code/MiMall-xmh/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/manhuax/xmh/2021/Vue全家桶高访小米商城/my code/MiMall-xmh/src/pages/orderConfirm.vue?vue&type=template&id=5673cdd4&","dependencies":[{"path":"/home/manhuax/xmh/2021/Vue全家桶高访小米商城/my code/MiMall-xmh/src/pages/orderConfirm.vue","mtime":1631953564575},{"path":"/home/manhuax/xmh/2021/Vue全家桶高访小米商城/my code/MiMall-xmh/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/manhuax/xmh/2021/Vue全家桶高访小米商城/my code/MiMall-xmh/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/manhuax/xmh/2021/Vue全家桶高访小米商城/my code/MiMall-xmh/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/manhuax/xmh/2021/Vue全家桶高访小米商城/my code/MiMall-xmh/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}